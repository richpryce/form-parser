Resources:
  MyBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: my-bucket

  MyFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: my-lambda-deploy-bucket
        S3Key: hello-world.zip
      FunctionName: my-lambda-function
      Handler: index.handler
      Role: !GetAtt MyRole.Arn
      Runtime: nodejs14.x
      Timeout: 30

  MyBucketNotification:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref MyBucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt MyFunction.Arn

  MyRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: !Join ['', ['arn:aws:s3:::', !Ref MyBucket, '/*']]
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "S3 Bucket Configuration"
        Parameters:
          - MyBucket
      - Label:
          default: "Lambda Function Configuration"
        Parameters:
          - MyFunction
    ParameterLabels:
      MyBucket:
        default: "S3 Bucket Name"
      MyFunction:
        default: "Lambda Function to Trigger on S3 Events"

