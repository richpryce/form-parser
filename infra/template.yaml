AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DeploymentBucketName:
    Type: String
    Description: "The name of the S3 bucket for storing Lambda function code"
Resources:
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref DeploymentBucketName
        S3Key: hello-world-lambda.zip
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${MyBucket}'
                  - !Sub 'arn:aws:s3:::${MyBucket}/*'
              - Effect: Allow
                Action:
                  - s3:PutBucketNotificationConfiguration
                Resource: !Sub 'arn:aws:s3:::${MyBucket}'

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${MyBucket}'

  BucketNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          exports.handler = async (event, context) => {
            const s3 = new AWS.S3();
            await s3.putBucketNotificationConfiguration({
              Bucket: event.ResourceProperties.Bucket,
              NotificationConfiguration: {
                LambdaFunctionConfigurations: [
                  {
                    LambdaFunctionArn: event.ResourceProperties.LambdaFunctionArn,
                    Events: ['s3:ObjectCreated:*'],
                  },
                ],
              },
            }).promise();
            return { PhysicalResourceId: 'BucketNotificationConfiguration' };
          };

  BucketNotificationConfiguration:
    Type: Custom::S3BucketNotification
    Properties:
      ServiceToken: !GetAtt BucketNotificationFunction.Arn
      Bucket: !Ref MyBucket
      LambdaFunctionArn: !GetAtt MyLambdaFunction.Arn
